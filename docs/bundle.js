(()=>{"use strict";var t={769:(t,i)=>{Object.defineProperty(i,"__esModule",{value:!0});class s{constructor(t=[]){this.blocks=t}detectCollision(t){for(let i=0;i<this.blocks.length;i++)if(this.blocks[i].position.x==t.x&&this.blocks[i].position.y==t.y)return!0;return!1}detectCollisionWithSprite(t){for(let i=0;i<this.blocks.length;i++)for(let s=0;s<t.blocks.length;s++)if(this.blocks[i].position.x==t.blocks[s].position.x&&this.blocks[i].position.y==t.blocks[s].position.y)return!0;return!1}detectCollisionWithBlock(t){for(let i=0;i<this.blocks.length;i++)if(this.blocks[i].position.x==t.position.x&&this.blocks[i].position.y==t.position.y)return!0;return!1}}class e extends s{constructor(t,i){super([{position:t,color:i}])}get block(){return this.blocks[0]}}class o extends s{constructor(t,i){let s=[];for(let e=0;e<i;e++)s.push({position:{x:t.x+e,y:t.y+e},color:"black"});super(s)}eat(t){this.blocks.push({...t,color:"black"})}move(t,i){this.blocks=[...this.blocks.slice(1),{position:{x:this.headBlock.position.x+t,y:this.headBlock.position.y+i},color:"black"}]}moveTo(t,i){this.blocks=[...this.blocks.slice(1),{position:{x:t,y:i},color:"black"}]}detectCollisionWithSelf({x:t,y:i}){return this.blocks.slice(1).some((s=>s.position.x==t&&s.position.y==i))}get headBlock(){return this.blocks[this.blocks.length-1]}}class h extends e{constructor(t,i="red"){super(t,i)}}class n extends e{constructor(t,i="#666666"){super(t,i)}}i.default=class{constructor(){this.cellSize=20,this.cellsX=40,this.cellsY=40,this.width=this.cellsX*this.cellSize,this.height=this.cellsY*this.cellSize,this.isRunning=!0,this.frameCount=0,this.fps=20,this.fpsInterval=1e3/this.fps,this.apples=[],this.numApples=10,this.traps=[],this.numTraps=5,this.gameStatus="running",this.scale=1,this.setupDimensions(),this.setupButtons(),this.startGame()}startGame(){this.lastTime=window.performance.now(),this.startTime=this.lastTime,this.buildSprites(),window.addEventListener("keydown",this.onKeyDown.bind(this),!1),window.requestAnimationFrame(this.runGameLoop.bind(this)),this.isRunning=!0}buildSprites(){this.setSnakePosition(),this.setApplePositions(),this.setTrapPositions()}setupDimensions(){if(this.canvas=document.createElement("Canvas"),this.context.lineWidth=2,document.body.append(this.canvas),this.cellsX*this.cellSize*this.scale+1>window.innerHeight){const t=window.innerHeight;this.cellSize=t/(this.scale*this.cellsY)-1,this.width=this.cellsX*this.cellSize,this.height=this.cellsY*this.cellSize}this.canvas.style.width=this.width+"px",this.canvas.style.height=this.height+"px",this.canvas.width=this.width,this.canvas.height=this.height}setupButtons(){window.addEventListener("load",(()=>{this.startOverButton=document.createElement("button"),this.startOverButton.innerHTML="Start Over",this.startOverButton.addEventListener("click",this.onStartOverClick.bind(this)),this.toggleStartOverButton(!1),document.getElementById("controls").appendChild(this.startOverButton)}))}onStartOverClick(){this.apples=[],this.traps=[],this.player=null,this.buildSprites(),this.isRunning=!0,this.gameStatus="running",window.requestAnimationFrame(this.runGameLoop.bind(this))}toggleStartOverButton(t){this.startOverButton.style.opacity=t?"1":"0"}onKeyDown(t){switch(t.key){case"Escape":this.isRunning=!1;break;case"a":this.direction="Left";break;case"s":this.direction="Down";break;case"d":this.direction="Right";break;case"w":this.direction="Up"}}moveInDirection(){switch(this.direction){case"Up":this.movePlayer(0,-1);break;case"Down":this.movePlayer(0,1);break;case"Left":this.movePlayer(-1,0);break;case"Right":this.movePlayer(1,0)}}movePlayer(t,i){const s=this.player.headBlock.position.x+t,e=this.player.headBlock.position.y+i;this.checkState({x:s,y:e})&&(s<0?this.player.moveTo(this.cellsX-1,e):s>this.cellsX-1?this.player.moveTo(0,e):e<0?this.player.moveTo(s,this.cellsY-1):e>this.cellsY-1?this.player.moveTo(s,0):this.player.move(t,i))}runGameLoop(t){if(!this.isRunning)return void this.toggleStartOverButton(!0);this.animationFrameRequestId=window.requestAnimationFrame(this.runGameLoop.bind(this));const i=t,s=i-this.lastTime;if(s>this.fpsInterval){this.lastTime=i-s%this.fpsInterval;const t=i-this.startTime;this.moveInDirection(),this.paint(),this.drawFPS(t),this.showGameMessage()}}checkState(t){const{x:i,y:s}=t;if(this.playerIsCollidedWithTrap({x:i,y:s}))return this.lostGame(),!1;let e=this.playerIsCollidedWithApple({x:i,y:s});if(e){const t=this.apples.indexOf(e);return this.player.eat(e.block),this.apples=[...this.apples.slice(0,t),...this.apples.slice(t+1)],!1}return this.player.detectCollisionWithSelf(t)?(console.log({position:t,headBlock:this.player.headBlock.position}),this.lostGame(),!1):0!=this.apples.length||(this.isRunning=!1,this.gameStatus="won",window.cancelAnimationFrame(this.animationFrameRequestId),!1)}lostGame(){this.isRunning=!1,this.gameStatus="lost",window.cancelAnimationFrame(this.animationFrameRequestId)}playerIsCollidedWithTrap({x:t,y:i}){return this.traps.some((s=>s.detectCollision({x:t,y:i})))}playerIsCollidedWithApple({x:t,y:i}){return this.apples.find((s=>s.detectCollision({x:t,y:i})))}get context(){return this.canvas.getContext("2d")}paint(){this.clearScreen(),this.drawGrid(0,0,this.width,this.height),this.drawSprite(this.player),this.apples.forEach((t=>this.drawSprite(t))),this.traps.forEach((t=>this.drawSprite(t)))}clearScreen(){this.context.fillStyle="white",this.context.clearRect(0,0,this.width,this.height)}drawSprite(t){t.blocks.forEach((t=>{this.drawBlock(t.position.x,t.position.y,t.color)}))}drawBlock(t,i,s){this.context.fillStyle=s,this.context.fillRect(t*this.cellSize,i*this.cellSize,this.cellSize,this.cellSize)}drawGrid(t,i,s,e){this.context.strokeStyle="#CCCCCC";for(let t=0;t<=s;t+=this.cellSize)this.context.beginPath(),this.context.moveTo(t,i),this.context.lineTo(t,e),this.context.stroke();for(let i=0;i<=e;i+=this.cellSize)this.context.beginPath(),this.context.moveTo(t,i),this.context.lineTo(s,i),this.context.stroke()}showGameMessage(){switch(this.gameStatus){case"lost":this.drawTextAtMiddle("Try again");break;case"won":this.drawTextAtMiddle("You won!")}}drawFPS(t){const i=Math.round(1e3/(t/++this.frameCount)*100)/100;this.drawTextAtBottomRight(`FPS: ${i.toString()}`)}drawStrokeText(t,i,s){this.context.strokeStyle="white";const e=this.context.lineWidth;this.context.lineWidth=4,this.context.strokeText(t,i,s),this.context.fillStyle="black",this.context.fillText(t,i,s),this.context.lineWidth=e}drawTextAtMiddle(t){this.context.font="36px sans-serif";const i=this.context.measureText(t);this.drawStrokeText(t,this.width/2-i.width/2,this.height/2-i.actualBoundingBoxAscent/2)}drawTextAtBottomRight(t){this.context.font="12px sans-serif";const i=this.context.measureText(t);this.drawText(t,this.width-i.width-1,this.height-2)}drawText(t,i,s){this.context.fillStyle="black",this.context.fillText(t,i,s,this.width)}setSnakePosition(){const[t,i]=[Math.floor(this.cellsX/2),Math.floor(this.cellsY/2)];this.player=new o({x:t,y:i},6)}getRandomXY(){return{x:Math.floor(Math.random()*this.cellsX),y:Math.floor(Math.random()*this.cellsY)}}setApplePositions(){for(let t=0;t<this.numApples;t++){let t;for(;!t||t.detectCollisionWithSprite(this.player);){const{x:i,y:s}=this.getRandomXY();t=new h({x:i,y:s})}this.apples.push(t)}}setTrapPositions(){for(let t=0;t<this.numTraps;t++){let t;for(;!t||t.detectCollisionWithSprite(this.player)||this.apples.some((i=>i.detectCollisionWithSprite(t)));){const{x:i,y:s}=this.getRandomXY();t=new n({x:i,y:s})}this.traps.push(t)}}}},607:function(t,i,s){var e=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(i,"__esModule",{value:!0}),(new(e(s(769)).default)).runGameLoop()}},i={};!function s(e){if(i[e])return i[e].exports;var o=i[e]={exports:{}};return t[e].call(o.exports,o,o.exports,s),o.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,