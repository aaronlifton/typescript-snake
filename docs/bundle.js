(()=>{"use strict";var t={221:function(t,i,e){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(i,"__esModule",{value:!0});const o=s(e(858)),n=s(e(356)),h=s(e(408));i.default=class{constructor(){this.cellSize=20,this.cellsX=40,this.cellsY=40,this.width=this.cellsX*this.cellSize,this.height=this.cellsY*this.cellSize,this.isRunning=!0,this.frameCount=0,this.fps=20,this.fpsInterval=1e3/this.fps,this.apples=[],this.numApples=10,this.traps=[],this.numTraps=5,this.gameStatus="running",this.scale=1,this.setupDimensions(),this.setupButtons(),this.startGame()}startGame(){this.lastTime=window.performance.now(),this.startTime=this.lastTime,this.buildGradients(),this.buildSprites(),window.addEventListener("keydown",this.onKeyDown.bind(this),!1),window.requestAnimationFrame(this.runGameLoop.bind(this)),this.isRunning=!0}buildSprites(){this.setSnakePosition(),this.setApplePositions(),this.setTrapPositions()}setupDimensions(){if(this.canvas=document.createElement("Canvas"),this.context.lineWidth=2,document.body.append(this.canvas),this.cellsX*this.cellSize*this.scale+1>window.innerHeight){const t=window.innerHeight;this.cellSize=t/(this.scale*this.cellsY)-1,this.width=this.cellsX*this.cellSize,this.height=this.cellsY*this.cellSize}this.canvas.style.width=this.width+"px",this.canvas.style.height=this.height+"px",this.canvas.width=this.width,this.canvas.height=this.height}setupButtons(){window.addEventListener("load",(()=>{this.startOverButton=document.createElement("button"),this.startOverButton.innerHTML="Start Over",this.startOverButton.addEventListener("click",this.onStartOverClick.bind(this)),this.toggleStartOverButton(!1),document.getElementById("controls").appendChild(this.startOverButton)}))}onStartOverClick(){this.apples=[],this.traps=[],this.player=null,this.buildSprites(),this.isRunning=!0,this.gameStatus="running",window.requestAnimationFrame(this.runGameLoop.bind(this))}toggleStartOverButton(t){this.startOverButton.style.opacity=t?"1":"0"}onKeyDown(t){switch(t.key){case"Escape":this.isRunning=!1;break;case"a":this.direction="Left";break;case"s":this.direction="Down";break;case"d":this.direction="Right";break;case"w":this.direction="Up"}}moveInDirection(){switch(this.direction){case"Up":this.movePlayer(0,-1);break;case"Down":this.movePlayer(0,1);break;case"Left":this.movePlayer(-1,0);break;case"Right":this.movePlayer(1,0)}}movePlayer(t,i){let{x:e,y:s}=this.player.positionWithOffset(t,i);e<0?e=this.cellsX-1:e>this.cellsX-1?e=0:s<0?s=this.cellsY-1:s>this.cellsY-1&&(s=0),this.checkState({x:e,y:s})&&this.player.moveTo(e,s)}runGameLoop(t){if(!this.isRunning)return void this.toggleStartOverButton(!0);this.animationFrameRequestId=window.requestAnimationFrame(this.runGameLoop.bind(this));const i=t,e=i-this.lastTime;if(e>this.fpsInterval){this.lastTime=i-e%this.fpsInterval;const t=i-this.startTime;this.moveInDirection(),this.paint(),this.drawFPS(t),this.showGameMessage()}}checkState(t){const{x:i,y:e}=t;if(this.playerIsCollidedWithTrap({x:i,y:e}))return this.lostGame(),!1;let s=this.playerIsCollidedWithApple({x:i,y:e});if(s){const t=this.apples.indexOf(s);return this.player.eat(s.block),this.apples=[...this.apples.slice(0,t),...this.apples.slice(t+1)],!1}return this.player.detectCollisionWithSelf(t)?(this.lostGame(),!1):0!=this.apples.length||(this.isRunning=!1,this.gameStatus="won",window.cancelAnimationFrame(this.animationFrameRequestId),!1)}lostGame(){this.isRunning=!1,this.gameStatus="lost",window.cancelAnimationFrame(this.animationFrameRequestId)}playerIsCollidedWithTrap(t){return this.traps.some((i=>i.detectCollisionAtPosition(t)))}playerIsCollidedWithApple(t){return this.apples.find((i=>i.detectCollisionAtPosition(t)))}get context(){return this.canvas.getContext("2d")}paint(){this.clearScreen(),this.drawGrid(0,0,this.width,this.height),this.drawSprite(this.player,"snakeGradient"),this.apples.forEach((t=>this.drawSprite(t,"appleGradient"))),this.traps.forEach((t=>this.drawSprite(t,"trapGradient")))}clearScreen(){this.context.fillStyle="white",this.context.clearRect(0,0,this.width,this.height)}buildGradients(){const t=this.context.createLinearGradient(0,0,this.width,this.height);t.addColorStop(0,"pink"),t.addColorStop(.5,"red"),t.addColorStop(1,"crimson");const i=this.context.createLinearGradient(0,0,this.width,this.height);i.addColorStop(0,"grey"),i.addColorStop(.5,"darkgrey"),i.addColorStop(1,"gainsboro");const e=this.context.createLinearGradient(0,0,this.width,this.height);e.addColorStop(0,"darkslategrey"),e.addColorStop(.5,"#333333"),e.addColorStop(1,"black"),this.gradients={appleGradient:t,trapGradient:i,snakeGradient:e}}drawSprite(t,i){t.blocks.forEach((t=>{this.drawBlock(t,i)}))}drawBlock(t,i){this.context.fillStyle=i?this.gradients[i]:t.color,this.context.fillRect(t.position.x*this.cellSize,t.position.y*this.cellSize,this.cellSize,this.cellSize)}drawGrid(t,i,e,s){this.context.strokeStyle="#CCCCCC";for(let t=0;t<=e;t+=this.cellSize)this.context.beginPath(),this.context.moveTo(t,i),this.context.lineTo(t,s),this.context.stroke();for(let i=0;i<=s;i+=this.cellSize)this.context.beginPath(),this.context.moveTo(t,i),this.context.lineTo(e,i),this.context.stroke()}showGameMessage(){switch(this.gameStatus){case"lost":this.drawTextAtMiddle("Try again");break;case"won":this.drawTextAtMiddle("You won!")}}drawFPS(t){const i=Math.round(1e3/(t/++this.frameCount)*100)/100;this.drawTextAtBottomRight(`FPS: ${i.toString()}`)}drawStrokeText(t,i,e){this.context.strokeStyle="white";const s=this.context.lineWidth;this.context.lineWidth=4,this.context.strokeText(t,i,e),this.context.fillStyle="black",this.context.fillText(t,i,e),this.context.lineWidth=s}drawTextAtMiddle(t){this.context.font="36px sans-serif";const i=this.context.measureText(t);this.drawStrokeText(t,this.width/2-i.width/2,this.height/2-i.actualBoundingBoxAscent/2)}drawTextAtBottomRight(t){this.context.font="12px sans-serif";const i=this.context.measureText(t);this.drawText(t,this.width-i.width-1,this.height-2)}drawText(t,i,e){this.context.fillStyle="black",this.context.fillText(t,i,e,this.width)}setSnakePosition(){const[t,i]=[Math.floor(this.cellsX/2),Math.floor(this.cellsY/2)];this.player=new o.default({x:t,y:i},6)}getRandomXY(){return{x:Math.floor(Math.random()*this.cellsX),y:Math.floor(Math.random()*this.cellsY)}}setApplePositions(){for(let t=0;t<this.numApples;t++){let t;for(;!t||t.detectCollisionWithSprite(this.player);){const{x:i,y:e}=this.getRandomXY();t=new n.default({x:i,y:e})}this.apples.push(t)}}setTrapPositions(){for(let t=0;t<this.numTraps;t++){let t;for(;!t||t.detectCollisionWithSprite(this.player)||this.apples.some((i=>i.detectCollisionWithSprite(t)));){const{x:i,y:e}=this.getRandomXY();t=new h.default({x:i,y:e})}this.traps.push(t)}}}},653:(t,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.SingularSprite=void 0;class e{constructor(t=[]){this.blocks=t,this.defaultColor="black"}get color(){return this.defaultColor}buildBlock(t,i,e=this.color){return{position:{x:t,y:i},color:e}}detectCollisionAtPosition(t){for(let i=0;i<this.blocks.length;i++)if(this.blocks[i].position.x==t.x&&this.blocks[i].position.y==t.y)return!0;return!1}detectCollisionWithSprite(t){for(let i=0;i<this.blocks.length;i++)for(let e=0;e<t.blocks.length;e++)if(this.blocks[i].position.x==t.blocks[e].position.x&&this.blocks[i].position.y==t.blocks[e].position.y)return!0;return!1}detectCollisionWithBlock(t){for(let i=0;i<this.blocks.length;i++)if(this.blocks[i].position.x==t.position.x&&this.blocks[i].position.y==t.position.y)return!0;return!1}}i.SingularSprite=class extends e{constructor(t){super(),this.blocks.push(this.buildBlock(t.x,t.y))}get block(){return this.blocks[0]}},i.default=e},607:function(t,i,e){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(i,"__esModule",{value:!0}),(new(s(e(221)).default)).runGameLoop()},356:(t,i,e)=>{Object.defineProperty(i,"__esModule",{value:!0});const s=e(653);class o extends s.SingularSprite{get color(){return"red"}}i.default=o},858:function(t,i,e){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(i,"__esModule",{value:!0});const o=s(e(653));class n extends o.default{constructor(t,i){super();for(let e=0;e<i;e++){const i={x:t.x+e,y:t.y+e};this.blocks.push(this.buildBlock(i.x,i.y,this.color))}}eat(t){this.blocks.push({...t,color:this.color})}move(t,i){const e={x:this.headBlock.position.x+t,y:this.headBlock.position.y+i};this.blocks=[...this.blocks.slice(1),this.buildBlock(e.x,e.y,this.color)]}moveTo(t,i){this.blocks=[...this.blocks.slice(1),this.buildBlock(t,i,this.color)]}detectCollisionWithSelf(t){return this.blocks.slice(1).some((i=>i.position.x==t.x&&i.position.y==t.y))}positionWithOffset(t,i){return{x:this.headBlock.position.x+t,y:this.headBlock.position.y+i}}get headBlock(){return this.blocks[this.blocks.length-1]}}i.default=n},408:(t,i,e)=>{Object.defineProperty(i,"__esModule",{value:!0});const s=e(653);class o extends s.SingularSprite{get color(){return"#666666"}}i.default=o}},i={};!function e(s){if(i[s])return i[s].exports;var o=i[s]={exports:{}};return t[s].call(o.exports,o,o.exports,e),o.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,